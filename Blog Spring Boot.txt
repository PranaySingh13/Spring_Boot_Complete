=====================
What is REST ?
=====================
It is software architectural style to guide the design of architecture of web.
REST-Representational State Transfer
i.e;
Transfer data between parties in any format json/xml.

=====================
REST Guidelines/REST Architecture Constraints
=====================
1. Client-Server Architecture

client and server should be independent entities.

2. Stateless
Server should be stateless that it should not store any data.client will store data.

3. Cacheable
Same data can be stored in cache and can be reuse.
performance will increase as transacting data operations from database again and again will reduce.

4. Layered System
We have to create layered architecture that improves scalability and will help in load balancing.

5. Uniform Interface
Client server interactions should be unified way.

6. Code on Demand(Optional)
On Run-time code on demand from client can be executed from server.

=====================
REST Concepts
=====================
1. Resource
Anything that we want to expose to outside world, through our applications.
Ex:- Student,Teacher,Class,Subject etc. are the resources for Library Management System 

2.URI(Uniform Resource Identifier)
URI is to identify the resource.
Ex:
GET -----> http://localhost:8080/students/ ----> Return the list of students.

GET -----> http://localhost:8080/student/13 ----> Return the student of id 13.

POST-----> http://localhost:8080/students/create ----> Create a new student.

UPDATE -----> http://localhost:8080/student/update/13 ----> Update a student of id 13.

DELETE-----> http://localhost:8080/student/delete/13 ----> Delete a  student of id 13.

3.Sub-resource
It is mainly dependent of main URI Resource.
Ex:- Student->Laptops
GET -----> http://localhost:8080/students/laptops ----> Return the list laptops of students.

GET -----> http://localhost:8080/student/13/laptops ----> Return the list of laptop student of id 13.

4.HTTP(Hyper Text Transfer Protocol) Request Methods
HTTP defines a set of request methods to indicate the desired action to be performed for a given resource.
HTTP Methods:-
GET-> Get the resource
POST->Create the resource
PUT->Update the resource
DELETE->Delete the resource

5. HTTP Response Codes
HTTp response status codes indicate whether a specific HTTP request has been successfully completed.

200 OK ---->Request is successfull.
200 Created ---->Request is successfull and new resource is created.
401 Unauthorised ---->Authentication is required for resource.
404 Not Found ---->Resource not found.
500 Internal Server Error ---->Error orrcured on server and request can not be fullfiled.

=====================
Client Requirements For Project
=====================
1. Client wants blogging application where he/she/user can write blogs and articles.
2.We have to build simple blogging applications:-
	2.1 User should create, update, delete and list posts.
	2.2 User should add,update,delete comments on posts.
	2.3 Categories the post according to categories.
	2.4 New User should be able to register on our application.
	2.5 User should be able to login to our application.
	2.6 Blog/Post includes one or many picture too.

====Technical Terms====
1. Proper Login, Register, POST and comment API.
2. Posts API includes Pagination and Sorting.
3. Proper user input validation handling.
4. Proper Exception Handling.
5. Role based authentication-role based security with APIs
	Ex:ADMIN, User
6. JWT(JSON Web Token) Based Authentication
7. Document all rest apis so that consumer can easy understand with the help of swagger.
8. Deploy the backend application on any cloud platform(AWS).

======Technologies======
Language:- Java 8
Framework:-Spring Boot
Build Tool:- Maven/Gradle
IDE:- STS/IntelliJ
Server:- Apache Tomcat(Embedded in Spring Boot)
Spring Concepts:- Core, JWT, Data JPA etc.
ORM:- Hibernate(Database Independent)
Cloud:- AWS(Amazon Web Services) EC2 Instance
Database:- MySQL
API Testing :- Postman Rest Client
API Documentation :- Swagger
Test Cases:- Mocikto

=====================
Finding Resource For Project
=====================
1. User
2. Category
3. Post
4. Comment
5. Tag(Optional)


====Best Architecture while using Spring Boot for Backend====
We will use Layered Architecture
Postman(Client)<->Controller<->Services<->Repositories<->Database

Controller Layer ---> API Layer
Services Layer ---> Business Logic
Repository Layer ----> Dao Layer

=====================
How Database Structure looks like for Blogging Application
=====================
Download Draw.io software in your system.
We are designing ER Visual Diagram for our entities on Draw.io
https://app.diagrams.net/ 

=====================
Difference Between Entity vs DTO/model
=====================

Entity is class mapped to table. Dto is class mapped to "view" layer mostly. What needed to store is entity & which needed to 'show' on web page is DTO.


For Calling JPA repository methods we need entities object but we are getting DTO objects. THerefore We will convert UserDto to User Object.

For Response we need the DTO objects but we are getting response in Entitie from JPA repository methods. THerefore We will convert User to UserDto Object again.

======================
How we Autowired Interface ?
======================
	@Test
	public void repositoryTest() {
		String className = userRepo.getClass().getName();
		String packageName = userRepo.getClass().getPackage().getName();
		System.out.println(className);// com.sun.proxy.$Proxy101
		System.out.println(packageName);// com.sun.proxy
	}

Question is How we are autowiring repository interface if we are not implementing Implementation class for repo ?
So, When we use autowired Repository in other layer then the object is created of Proxy101 i.e; the repository implementation class name which is created dynamically at runtime by spring container.Whenever Spring project starts the repository interfaces are scanned by spring container and their respective runtime dyanamic implementation class is created in a package.

=====================
Why ModelMapper?
=====================
The goal of ModelMapper is to make object mapping easy, by automatically determining how one object model maps to another, based on conventions, in the same way that a human would - while providing a simple, refactoring-safe API for handling specific use cases.

/*
	 * Spring Container creates the object of this ModelMapper class when we
	 * autowired this class in our other classes.
	 * 
	 * Basically used to convert the class object into another class object
	 * condition source and destination class properties match based on their name.
	 */
	@Bean
	public ModelMapper modelMapper() {
		return new ModelMapper();
	}
=====================
Bean Validator
=====================

Basics of Validation
1. Java Bean is validated with JSR 380 known as Bean Validation 2.0.
2. JSR 380 is specification for the Java API for bean validation. 	Properties of bean meet the specific criteria.
3. For validation different annotations is used like @NotNull, @Min, @Size etc.
4. Hibernate Validator is a implementation of Validation API.

Important Annotations for Validations

@NotNull
@Size
@Email
@Min
@Max
@NotEmpty
etc.

How to Use:
1.
Add new Spring Boot Version have dependency in pom.xml.
Spring boot provides support for Hibernate Validator.
<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
    <version>2.6.6</version>
</dependency>

2. 
Apply validation api annotations to Dto which is coming as payload from user.

@NotNull: The CharSequence, Collection, Map or Array object is not null, but can be empty.
@NotEmpty: The CharSequence, Collection, Map or Array object is not null and size > 0.
@NotBlank: The string is not null and the trimmed length is greater than zero.

Here are a few examples:

String name = null;
@NotNull: false
@NotEmpty: false
@NotBlank: false

String name = "";
@NotNull: true
@NotEmpty: false
@NotBlank: false

String name = " ";
@NotNull: true
@NotEmpty: true
@NotBlank: false

String name = "Great answer!";
@NotNull: true
@NotEmpty: true
@NotBlank: true

Perfect Email Pattern:- @Pattern(regexp = "^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$")

Password Patterns:-
Secure Password requirements

Password must contain at least one digit [0-9].
Password must contain at least one lowercase Latin character [a-z].
Password must contain at least one uppercase Latin character [A-Z].
Password must contain at least one special character like ! @ # & ( ).
Password must contain a length of at least 8 characters and a maximum of 20 characters.
Below is the regex that matches all the above requirements.

^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,20}$

Regex password explanation

^                                   # start of line
  (?=.*[0-9])                       # positive lookahead, at least one digit [0-9]
  (?=.*[a-z])                       # positive lookahead, at least one lowercase character [a-z]
  (?=.*[A-Z])                       # positive lookahead, at least one uppercase character [A-Z]
  (?=.*[!@#&()–[{}]:;',?/*~$^+=<>]) # positive lookahead, at least one of the special character in this [..]
  .                                 # matches anything
  {8,20}                            # length at least 8 characters and maximum of 20 characters
$                                   # end of line

3. 
For which api you have to perform validation, add @Valid annotation in respective controller API method argument.



4. 
Handle validation exceptions globally for message formatting
@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<Map<String, String>> handleMethodArgsNotValidException(MethodArgumentNotValidException ex) {
		Map<String, String> response = new HashMap<>();
		ex.getBindingResult().getAllErrors().forEach(error -> {
			String fieldName = ((FieldError) error).getField();
			String message = error.getDefaultMessage();

			response.put(fieldName, message);
		});

		return new ResponseEntity<Map<String, String>>(response, HttpStatus.BAD_REQUEST);
	}

======================
Pagination and Sorting
======================
1.We need pageSize and pageNumber from URL.
pageNumber starts from 0.
2.We need sorting by any one field.
http://localhost:1234/posts?pageSize=5&pageNumber=2&sortBy=title

JpaRepository already extended by PaginationRepository contains all its methods.

Return all entities sorted by the given options.
Iterable<T> findAll(Sort sort);

Returns a page of entities.
Page<T> findAll(Pageable pageable);
========================
Modifying Post Response 
========================
1. Create class in payload PostResponse which consist of pageNumber,pageSize, totalElements, totalPages, firstPage, lastPage, content(List<Dto>).

2. // custom pagination
Page<Post> findByCategory(Category category, Pageable p);

===========================
Spring Basic Authentication
===========================
1.Adding spring-starter-security dependency in pom.xml which will apply web login form based authentication(which is not practically used).

2. We create a SecurityConfig class which extends WebSecurityConfigurerAdapter from which we can Override its method to configure the HttpSecurity to implement http based basic authentication.

3.Create class CustomUserDetailService which implements UserDetailsService which is Core interface which loads user-specific data. It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider from which we can Override its method loadUserByUsername to provides core user information with returning UserDetails object.
To loadUserByUsername, create a method in UserRepository which will find username in our case findByUserEmail.

4. To get the roles, create role entity and mapped list of roles in user entity. 

5.Implements User with UserDetails to override its methods to provides core user information consist of Collection of roles of granted authorities.

6. Create a Bean of PasswordEncoder in SecurityConfig class to get the BCryprPasswordEncoder.

===========================
Spring JWT Authentication
===========================
1. JWT stands for JSON Web Token.
2. JWT is mostly used for securing Rest APIs.
3. Best way to communicate security between client and server securely.
4. JWT follows a stateless authentication mechanism(Imp point) that is it will not store any data on server.

Architecture of JWT
JWT forms with adding three parts:-
1.1 Header:- It consisit of Algorithm which is used+ Type of token.
1.2 Payload:- Information of claims(Data)
1.3 Signature:- encoded header+encoded payload+key
JWT:- Header.Payload.Signature

=============================
8 Steps to implement JWT Auth
=============================
1.Add dependency(io.jsonwebtoken) in pom.xml.

2.Create JWTAuthenticationEntryPoint class which implements AuthenticationEntryPoint and override its methods which get called and generate exception when unauthorised user access our secured apis.

3.Create JWTTokenHelper class.

4.Create JWTAuthenticationFilter class which extends OnceRequestFilter and we are doing following operations:-
	4.1 Get JWT Token from request.
	4.2 Validate Token.
	4.3 Get User from Token.
	4.4 Load user associated with Token.
	4.5 Set Spring security that is set authentication.

5.Create JWTAuthResponse class consist of token and user details.

6.Configure JWT in spring security config.

7.Create Login API to return Token.

8.Test the application.
	8.1 Run http://localhost:1234/api/auth/login with passing request body containing username and password it will generate token in response.
	8.2 For testing apis add Authorization as HEADER_STRING in key of header and add Bearer<space><token> in value of header where Bearer<space> 			is TOKEN_PREFIX.
	8.3 If the TOKEN_PREFIX is not present or wrong comparing as in application,user can not access apis.

=========================
Role Specific API Access
=========================
1.Add @EnableGlobalMethodSecurity in SecurityConfig class by which we can apply security on every method apis with the help of @PreAuthorize and providing it with role specific @PreAuthorize("hasRole('ADMIN')") or @PreAuthorize("hasRole('USER')") etc.
2.The @PreAuthorize annotation checks the given expression before entering the method, whereas the @PostAuthorize annotation verifies it after the execution of the method and could alter the result.

HasRole()

When using the hasRole() security expression, the prefix ROLE_ is skipped. This is because Spring Framework will add the prefix automatically for us.

@PreAuthorize("hasRole('ADMIN')")

HasAnyRole() 

When you need to support multiple roles, you can use the hasAnyRole() expression.

@PreAuthorize("hasAnyRole('ADMIN','DB-ADMIN')")

HasAuthority()

@PreAuthorize annotation can also be used with hasAuthority(). When using hasAuthority() expression, you will need to provide a complete authority name.

@PreAuthorize("hasAuthority('DELETE_AUTHORITY')")

or

@PreAuthorize("hasAuthority('ROLE_ADMIN')")

HasAnyAuthority()

When you need to support multiple authorities, hasAnyAuthority() expression can be used.

@PreAuthorize("hasAnyAuthority('DELETE_AUTHORITY', 'UPDATE_AUTHORITY')")

=================================
Documentation APIs using Swagger
=================================
1. Add dependency for swagger
<!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter -->
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-boot-starter</artifactId>
    <version>3.0.0</version>
</dependency>

2. Creating Swagger Config class for creating API Documentation.

==========================================
Swagger Configuration with Spring Security
==========================================
1. Two methods are need to implement in the docket in swagger config class .securityContexts(securityContexts()) and .securitySchemes(apiKeys());

=================================
Deploying Blog Application on AWS
=================================
1. Some AWS Common Services

Amazon EC2:- Create instance for Virtual Servers in the Cloud.

Amazon Elastic Beanstalk:- Amazon Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services.

Amazon RDS:- Easily set up, operate, and scale a relational database in the cloud.

Amazon Route 53:-  Registering a domain, configuring DNS, or using another Route 53 feature.To allow testing, a Route 53 hosted zone that is deleted within 12 hours of creation is not charged.

Amazon S3:- Store and retrieve any amount of data from anywhere.

2. Managing different Environments with creating environment specific application-env.properties file .
3. common properties should lie only in application.properties file.
4. Setting up mysql on AWS using RDS Amazon Service.
5. Setting up the mysql production database that is connected with AWS and config application-prod.properties.
6. Creating jar file of our spring boot blog application
7. To test the jar file from command prompt
go to target folder
java -jar blog-application-0.0.1.jar
8. Change the port number to 5000 in application.properties file as Amazon Elastic Beanstalk runs default on 5000 port and build the project again.
9. Deploy the spring boot application jar file which is in target folder to Amazon Elastic Beanstalk.

Deployed Link:- http://blogapp-env.eba-x2kazq8n.ap-south-1.elasticbeanstalk.com/swagger-ui/index.